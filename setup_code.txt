try {

vertShader = createShader("shaders/screen.vert",ARBVertexShader.GL_VERTEX_SHADER_ARB);

fragShader = createShader("shaders/screen.frag",ARBFragmentShader.GL_FRAGMENT_SHADER_ARB);

}

catch(Exception exc) {

exc.printStackTrace();

return;
}

finally {

if(vertShader == 0 || fragShader == 0)

return;

}

 

program = ARBShaderObjects.glCreateProgramObjectARB();

 

if(program == 0)

return;

 

/*
* if the vertex and fragment shaders setup sucessfully,

* attach them to the shader program, link the sahder program

* (into the GL context I suppose), and validate

*/

ARBShaderObjects.glAttachObjectARB(program, vertShader);

ARBShaderObjects.glAttachObjectARB(program, fragShader);

ARBShaderObjects.glLinkProgramARB(program);

if (ARBShaderObjects.glGetObjectParameteriARB(program, ARBShaderObjects.GL_OBJECT_LINK_STATUS_ARB) == GL11.GL_FALSE) {
System.err.println(getLogInfo(program));

return;

}

 

ARBShaderObjects.glValidateProgramARB(program);

if (ARBShaderObjects.glGetObjectParameteriARB(program, ARBShaderObjects.GL_OBJECT_VALIDATE_STATUS_ARB) == GL11.GL_FALSE) {

System.err.println(getLogInfo(program));

return;

}